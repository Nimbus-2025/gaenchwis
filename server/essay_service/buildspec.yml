version: 0.2

phases:
  install:
    commands:
      - echo Installing prerequisites...
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - yum install -y git
      - git config --global protocol.version 2

  pre_build:
    commands:
      # 변경된 파일 확인
      - echo "Event = $CODEBUILD_WEBHOOK_EVENT"
      - |
        if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_CREATED" ] || [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_UPDATED" ]; then
          # PR의 경우
          echo "Processing Pull Request..."
          git fetch --unshallow || true
          git fetch origin '+refs/heads/*:refs/remotes/origin/*'
          BEFORE_COMMIT_ID=$(echo $CODEBUILD_WEBHOOK_PREV_COMMIT)
          AFTER_COMMIT_ID=$(echo $CODEBUILD_WEBHOOK_HEAD_REF)
          echo "Comparing $BEFORE_COMMIT_ID with $AFTER_COMMIT_ID"
          CHANGED_FILES=$(git diff --name-only $BEFORE_COMMIT_ID $AFTER_COMMIT_ID)
        elif [ "$CODEBUILD_WEBHOOK_EVENT" = "PUSH" ]; then
          # Push의 경우
          echo "Processing Push..."
          CHANGED_FILES=$(git diff --name-only HEAD^)
        else
          echo "Default case..."
          CHANGED_FILES=""
        fi

        if [ -z "$CHANGED_FILES" ]; then
          echo "No changed files detected, skipping build..."
          exit 0
        fi

        if echo "$CHANGED_FILES" | grep -q "^server/essay_service/"; then
          echo "Changes detected in essay_service directory, proceeding with build..."
        else
          echo "No changes in essay_service directory, skipping build..."
          exit 0
        fi

      # ECR 로그인
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      # 환경변수 설정
      - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/gaenchwis/essay-service
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

  build:
    commands:
      # Docker 이미지 빌드
      - echo Building the Docker image...
      - cd server/essay_service
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG -f Dockerfile . --progress=plain
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo Writing image definitions file...
      - printf '[{"name":"Gaenchwis-EssayBackend","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > $CODEBUILD_SRC_DIR/imageDefinitions.json
      - envsubst < ./task-definition.json > $CODEBUILD_SRC_DIR/task-definition.json

artifacts:
  files:
    - task-definition.json
    - imageDefinitions.json
  base-directory: $CODEBUILD_SRC_DIR/
  discard-paths: yes
